#!/bin/bash

exec 2>&1

set -e # exit immediately if a simple command exits with a non-zero status
set -u # report the usage of uninitialized variables

############################################################################

<% if not spec.bootstrap %>
exit 0
<% end %>

source /var/vcap/packages/openjdk-8/bosh/runtime.env
source /var/vcap/packages/kafka-utils/bosh/runtime.env

export PATH=$PATH:/var/vcap/packages/kafka/bin:$PATH

CDIR=/var/vcap/jobs/sanitytest/config
<% kafka = link('kafka') %>
<% if kafka.p("tls.certificate", nil) != nil %>
SP=<%= kafka.p("keystore_password") %>

TS=$CDIR/generated.truststore.jks
KS=$CDIR/generated.keystore.jks
TK=$CDIR/generated.key.p12

keytool -noprompt -import -storepass $SP -keystore $TS -storetype PKCS12 -file $CDIR/ca_certs.pem
openssl pkcs12 -export -in $CDIR/cert.pem -inkey $CDIR/key.pem -out $TK -password pass:$SP -name localhost
keytool -importkeystore -deststorepass $SP -destkeypass $SP -destkeystore $KS -deststoretype PKCS12 -srckeystore $TK -srcstoretype PKCS12 -srcstorepass $SP -srckeypass $SP -alias localhost
<% end %>

<% zks = link('zookeeper') %>
<% zk_port = zks.p('client_port') %>
export zk_peers=<%= zks.instances.map { |instance| "#{instance.address}:#{zk_port}" }.join(",") %>

<% kafka_port = kafka.p('listen_port') %>
export kafka_hosts=<%= kafka.instances.map { |instance| "#{instance.address}:#{kafka_port}" }.join(",") %>
export kafka_hosts_count=<%= kafka.instances.length == 1 ? 1 : kafka.instances.length - 1 %>

export testpath=/var/vcap/sys/run/sanitytest
mkdir -p $testpath

set -x
kafka-topics.sh --zookeeper $zk_peers --create --if-not-exists --replication-factor $kafka_hosts_count --partitions $kafka_hosts_count --topic test > $testpath/demo.out
echo "test message" | kafka-console-producer.sh --broker-list $kafka_hosts --topic test --producer.config $CDIR/client.properties 2> /dev/null
kafka-console-consumer.sh --timeout-ms 10000 --bootstrap-server $kafka_hosts --topic test --from-beginning --max-messages 1 --consumer.config $CDIR/client.properties >> $testpath/demo.out 2>/dev/null
kafka-topics.sh --zookeeper $zk_peers --delete --topic test >> $testpath/demo.out 2>/dev/null

# Define the configuration dir for kafka-utils
export KAFKA_DISCOVERY_DIR=$CDIR/kafka_discovery

kafka-utils

# Do the cluster consistency test
kafka-check --cluster-type cluster min_isr
kafka-check --cluster-type cluster replica_unavailability
kafka-check --cluster-type cluster replication_factor || true
kafka-check --cluster-type cluster offline