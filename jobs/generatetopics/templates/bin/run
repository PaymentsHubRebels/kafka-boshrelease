#!/bin/bash

exec 2>&1

set -e # exit immediately if a simple command exits with a non-zero status
set -u # report the usage of uninitialized variables

############################################################################

source /var/vcap/packages/openjdk-8/bosh/runtime.env
export PATH=$PATH:/var/vcap/packages/kafka/bin:$PATH

CDIR=/var/vcap/jobs/sanitytest/config
<% kafka = link('kafka') %>
<% if kafka.p("tls.certificate", nil) != nil %>
SP=<%= kafka.p("keystore_password") %>

TS=$CDIR/generated.truststore.jks
KS=$CDIR/generated.keystore.jks
TK=$CDIR/generated.key.p12

keytool -noprompt -import -storepass $SP -keystore $TS -storetype PKCS12 -file $CDIR/ca_certs.pem
openssl pkcs12 -export -in $CDIR/cert.pem -inkey $CDIR/key.pem -out $TK -password pass:$SP -name localhost
keytool -importkeystore -deststorepass $SP -destkeypass $SP -destkeystore $KS -deststoretype PKCS12 -srckeystore $TK -srcstoretype PKCS12 -srcstorepass $SP -srckeypass $SP -alias localhost
<% end %>

<% zks = link('zookeeper') %>
<% zk_port = zks.p('client_port') %>
export zk_peers=<%= zks.instances.map { |instance| "#{instance.address}:#{zk_port}" }.join(",") %>

<% kafka_port = kafka.p('listen_port') %>
export kafka_hosts=<%= kafka.instances.map { |instance| "#{instance.address}:#{kafka_port}" }.join(",") %>

set -x

<% kafka.p("topics").each do |topic| %>
<% if topic["configurations"] %>
kafka-topics.sh \
    --create \
    --zookeeper $zk_peers \
    --replication-factor <%= topic["replication_factor"] || 1 %> \
    --partitions <%= topic["partitions"] || 1 %> \
    --topic <%= topic["name"] %> \
    --if-not-exists <%= topic["configurations"].each { |config| config }.join(" ") %>
<% else %>
kafka-topics.sh \
    --create \
    --zookeeper $zk_peers \
    --replication-factor <%= topic["replication_factor"] || 1 %> \
    --partitions <%= topic["partitions"] || 1 %> \
    --topic <%= topic["name"] %> \
    --if-not-exists
<% end %>
<% end %>
